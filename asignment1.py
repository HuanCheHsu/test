# -*- coding: utf-8 -*-
"""Asignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jo0Yf8-FA4Ahidvc_Guo0087xtdpcZnL
"""

#Author Huan-Che Hsu Student ID:216498610
#Importing the numpy package
import numpy as np
import math

vector1 = np.array(["red", "Truck", 58, "yes"])
vector2 = np.array(["blue", "Car", 11, "no"])

print ("Color(Nominal), Veicle type(Ordinal), Distance Travelled(numeric), Insurance(binary)")
print (vector1)
print("dtype:", vector1[0].dtype, vector1[1].dtype, vector1[2].dtype,vector1[3].dtype)
print (vector2)
print("dtype:", vector2[0].dtype, vector2[1].dtype, vector2[2].dtype,vector2[3].dtype)

#numeric measures
def numeric(n, m):
  numeDiff = np.sqrt(n**2+m**2).astype(int)
  return numeDiff

a = vector1[2].astype(int)
b = vector2[2].astype(int)
numeric(a,b)

#binary measures
def Binary(n, m):
  count = 0
  if n == "yes":
      n = 1
      count +=1
  else:
      n = 0
      count +=1
  if m == "yes":
      m = 1
      count +=1
  else:
      m = 0
      count +=1
  binaDiff = (n + m)/count
  return binaDiff
Binary(vector1[3],vector2[3])

#Ordinal measures(Eucliden distance)
def Ordinal(n, m):
  if n == "truck":
    n = 3
  elif n == "bus":
    n = 2
  else:
    n = 1
  if m == "truck":
    m = 3
  elif n == "bus":
    m = 2
  else:
    m = 1
  ordiDiff = np.sqrt(n**2+m**2)
  return ordiDiff
Ordinal(vector1[1],vector2[1])

#Nominal measures
def Nominal(n,m):
  count = 1
  match = 0
  if(n == m):
    match =+ 1
    count =+ 1
  else:
    count =+ 1
  nomiDiff = (count-match)/count
  return nomiDiff
Nominal(vector1[0],vector2[0])

#Question 2
import numpy as np    
from scipy.spatial.distance import pdist, squareform

array1 = np.array([1, 3, 58, 1])
array2 = np.array([0, 1, 11, 0])
array3 = np.array([0, 2, 25, 1])
array4 = np.array([1, 2, 99, 1])
liftMeasures = np.array([array1,array2,array3,array4])

print("dtype:", liftMeasures.dtype)
print(squareform(pdist(liftMeasures)))

#Question 3
import numpy as np    
from scipy.spatial.distance import pdist, squareform
vector31 = np.array(["red", "truck", 58 ,"yes", 60, "no", "tall", " heavy", 98, 4])
vector32 = np.array(["blue", "van", 11, "no", 75, "no", "short", "light", 93, 4])
vector33 = np.array(["white", "van", 25, "yes", 20, "yes", "short", "light", 84, 4])

#numeric measures
def numeric(n, m):
  numeDiff = np.sqrt(n**2+m**2).astype(int)
  return numeDiff

a = vector31[2].astype(int)
b = vector32[2].astype(int)
c = vector33[2].astype(int)
abnu = numeric(a,b)
acnu = numeric(a,c)
bcnu = numeric(b,c)

i = vector31[4].astype(int)
j = vector32[4].astype(int)
k = vector33[4].astype(int)
ijnu = numeric(i,j)
iknu = numeric(i,k)
jknu = numeric(j,k)

x = vector31[8].astype(int)
y = vector32[8].astype(int)
z = vector33[8].astype(int)
xynu = numeric(x,y)
xznu = numeric(x,z)
yznu = numeric(y,z)

numericarray1 = np.array([abnu, acnu, bcnu])
numericarray2 = np.array([ijnu, iknu, jknu])
numericarray3 = np.array([xynu, xznu, yznu])
numericMatrix = np.array([numericarray1,numericarray2,numericarray3])

print(squareform(pdist(numericMatrix)))

#binary measures
def Binary(n, m):
  count = 0
  if n == "yes":
      n = 1
      count +=1
  else:
      n = 0
      count +=1
  if m == "yes":
      m = 1
      count +=1
  else:
      m = 0
      count +=1
  binaDiff = (n + m)/count
  return binaDiff
bi1 = Binary(vector31[3],vector32[3])
bi2 = Binary(vector31[3],vector33[3])
bi3 = Binary(vector32[3],vector33[3])

bi4 = Binary(vector31[5],vector32[5])
bi5 = Binary(vector31[5],vector33[5])
bi6 = Binary(vector32[5],vector33[5])
Binaryarray1 = np.array([bi1, bi2, bi3])
Binaryarray2 = np.array([bi4, bi5, bi6])
BinaryMatrix = np.array([Binaryarray1,Binaryarray2])

print(squareform(pdist(BinaryMatrix)))

#Ordinal measures(Eucliden distance)
def Ordinal(n, m):
  if n == "truck":
    n = 3
  elif n == "bus":
    n = 2
  else:
    n = 1
  if m == "truck":
    m = 3
  elif m == "bus":
    m = 2
  else:
    m = 1
  ordiDiff = np.sqrt(n**2+m**2)
  return ordiDiff
def Ordinal2(x, y):
  if x == "4":
    x = 3
  elif x == "2":
    x = 2
  else:
    x = 1
  if y == "4":
    y = 3
  elif y == "2":
    y = 2
  else:
    y = 1
  ordi2Diff = np.sqrt(x**2+y**2)
  return ordi2Diff
or1 = Ordinal(vector31[1],vector32[1])
or2 = Ordinal(vector31[1],vector33[1])
or3 = Ordinal(vector32[1],vector33[1])

or4 = Ordinal2(vector31[9],vector32[9])
or5 = Ordinal2(vector31[9],vector33[9])
or6 = Ordinal2(vector32[9],vector33[9])

ordinalarray1 = np.array([or1, or2, or3])
ordinalarray2 = np.array([or4, or5, or6])
ordinalMatrix = np.array([ordinalarray1, ordinalarray2])

print(squareform(pdist(ordinalMatrix)))

#Nominal measures
def Nominal(n,m):
  count = 1
  match = 0
  if(n == m):
    match =+ 1
    count =+ 1
  else:
    count =+ 1
  nomiDiff = (count-match)/count
  return nomiDiff
no1 = Nominal(vector31[0],vector32[0])
no2 = Nominal(vector31[0],vector33[0])
no3 = Nominal(vector32[0],vector33[0])

no4 = Nominal(vector31[6],vector32[6])
no5 = Nominal(vector31[6],vector33[6])
no6 = Nominal(vector32[6],vector33[6])

no7 = Nominal(vector31[7],vector32[7])
no8 = Nominal(vector31[7],vector33[7])
no9 = Nominal(vector32[7],vector33[7])

nominalarray1 = np.array([no1, no2, no3])
nominalarray2 = np.array([no4, no5, no6])
nominalarray3 = np.array([no7, no8, no9])
nominalMatrix = np.array([nominalarray1,nominalarray2,nominalarray3])

print(squareform(pdist(nominalMatrix)))

#Merge
vector1 = nominalarray1 + Binaryarray1 + ordinalarray1 + numericarray1
vector2 = nominalarray2 + ordinalarray2 + Binaryarray2 + numericarray2
vector3 = nominalarray3 + numericarray3

totalMatrix = np.array([vector1,vector2,vector3])
print(squareform(pdist(totalMatrix)))

#Question 4
vector1 = np.array(["red", "Truck", 58, "yes"])
vector2 = np.array(["blue", "Car", 11, "no"])
vector3 = np.array(["white", "bus", 25, "yes"])
vector4 = np.array(["red", "bus", 99, "yes"])

set1 = np.array([vector1[0], vector2[0]], vector3[0], vector4[0])
set2 = np.array([vector1[1], vector2[1]], vector3[1], vector4[1])
set3 = np.array([vector1[2], vector2[2]], vector3[2], vector4[2])
set4 = np.array([vector1[3], vector2[3]], vector3[3], vector4[3])